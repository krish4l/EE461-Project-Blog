Section 1 - EDA
1.0 File Importation
The project's main aim is to find out the remaining useful life of a fuel cell stack composed of 5 separate cells. The dataset consists of three files containing the data taken between 0-497.15 hours ( file 1), 497.16 - 1046.89 hours (file 2), and 1046.9 - 1154.213 hours. The data from all three files have been combined into 1 which will be used as the main dataset.
% Import Data without Ripples
warning ('off')

data1 = readtable('FC1_Ageing_part1.xlsx') ;
data2 = readtable('FC1_Ageing_part2.xlsx') ;
data3 = readtable('FC1_Ageing_part3.xlsx') ;
data = [data1; data2; data3]; % Combining all the data into one seperate table


The variable 'data' contains the entire data for the testing done with the fuel cell from 0 - 1154.213 hours.

1.2 Resolving missing data 
The ismissing and rmmising commands are used before any analysis is done, to resolve any irregulaties in the data and to prevent any errors in future computations.
% Check for missing data

TF = ismissing(data);

% Removal of any missing data 

data = rmmissing(data,"DataVariables",["U1_V_","U2_V_","U3_V_","U4_V_","U5_V_","Utot_V_","J_A_cm__","I_A_","TinH2__C_","ToutH2__C_","TinAIR__C_","ToutAIR__C_",]) ;

 

1.3 Data Visualization
1.3.1 Time series plot of all features
features = string(data.Properties.VariableNames);
featurecount = length(features); % Number of features
rows = ceil(sqrt(featurecount)); % Squareroot of the number of features rounded to highest interger
cols = ceil(featurecount / rows); % Number of features divided by the rows rounded to highest integer

% The for loop cycles between the number of features and plots the
% timeseries graphs of each feature
figure;
for i = 1:featurecount
    subplot(rows, cols, i);
    plot(data.Time_h_,data.(features{i})); 
    ylabel(features{i}, 'Interpreter', 'none');
    xlabel('Time (h)');
    grid on
end
                     Figure 1 : Time series plot of all the features

1.4 Add RUL as a response variable

% Step 1: Find the value of the initial voltage
voltage = data.Utot_V_;
timestamps_hr = data.Time_h_;
initial_voltage = voltage(1);
threshold_voltage = initial_voltage - (initial_voltage*3.5/100);

% Step 2: Find the first index where voltage drops below or equals the threshold
idx = find(voltage <= threshold_voltage, 1, 'first');

% Step 3: Get the corresponding time
threshold_time= timestamps_hr(idx);

% Step 4: Finding RUL
rul = threshold_time - timestamps_hr;
% Round each fractional hour into hour
hour_bins = floor(timestamps_hr); 
% Group values by hour and calculate mean voltage
[Hours, ~, idx] = unique(hour_bins);
avg_voltage = accumarray(idx, voltage, [], @mean);
% Round each fractional rul into hours
% Group values by hour and calculate mean voltage
RUL_int = round(rul);  % Rounds to the nearest integer
RUL = unique(RUL_int);         % Get unique RUL values
RUL = sort(RUL, 'descend');  % Sort descending

% Add RUL as a variable
% Plotting against threshold voltage
figure;
plot(Hours, avg_voltage,"Color","#0000FF")
hold on
yline(threshold_voltage, 'k--','Threshold Voltage');
xline(threshold_time, 'k--','Threshold Time')
xlabel("Time (hr)")
ylabel ("Stack Voltage")
hold off
 Figure 2 : Plot of the stack voltage degradation, with relation to the threshold voltage and threshold time

1.5 Sectioning data into test and train
response = RUL_int;
[trainindx,testindx] = dividerand(size(data,1),0.55,0.45);
train = data(trainindx,:);
trainresp = response(trainindx,:);
test = data(testindx,:);
testresp = response(testindx,:);

1.6 PCA
% Normalizing the data - Using mean scaling
data = train;
X = data{:,:} ;
mu = mean(X); % Row vector of column (feature) means
r = range(X); % Row vector of column ranges
X = (X-mu)./r; % Scaled feature matrix
1.6.1 Box plot of normalized scores
% Boxplot of the cleaned data

figure;
plot1 = boxplot(X, 'Colors', [0.2, 0.7, 0.4]);
                                        Figure 3 : Box plot of the normalized scores
1.6.2 PCA and Pareto Chart
% Computing the pca of the normalized data

[coeff, score, latent , tsquared, explained, mu] = pca(X) ;

% Pareto chart of principal components

figure;
paretochart = pareto(explained,0.95);
xlabel('Principal Components');
ylabel('Cumulative Variance (%)');
yline(95, 'k--', 'LineWidth', 2);
barHandle = paretochart(1);
set(barHandle, 'FaceColor', [0.7, 0.3, 0.5]); 
                           Figure 4 : Pareto chart of the variability of principle components

From the Pareto chart shown in Figure 4, it can be seen that the first 3 principal components capture 90% of the total variance, whilst 6 principal components are able to capture 95% of the total variance. Therefore, the dataset can be reduced to 3 or 6 features with minimal information being lost.
1.6.3 Correlation Heatmap
% Heatmap relating the principal components to the features

[P,S,V] = pca(X) ;
figure;

xLabels = compose("PC%d", 1:size(P, 2)); % Define xLabels as PC1,PC2...PCn
yLabels = data.Properties.VariableNames; % Define yLabels as the feature names

% Generating the heatmap
h = heatmap(P, 'XDisplayLabels', xLabels, 'YDisplayLabels', yLabels ,'Colormap', cool(50));

% Set the figure to be maximized and normalized
set(gcf, 'Units', 'Normalized', 'OuterPosition', [0 0 1 1]);
Figure 5 : Heatmap of the principal component correlation with dataset features

To view the heatmap properly, it is optimal to open it as a figure, using the open in figure window option on the top right of the output. From the heatmap given above it can be seen that certain features give a lot of contribution to a principal component. For example, P1 is affected heavily by all the cell voltage features (U1 - Utot) as indicated by the dark cyan color with correlation values being in the range of -0.2 to -0.41. P1 also has a positive (direct) relationship with Time (h) as indicated by the correlation value of 0.61. This shows that if the value of Time increases, so does P1 and vice versa as well. 

1.6.4 Biplot
% Biplot of the features in relation to the first three principle
% components

features = string(data.Properties.VariableNames) ;
figure;
biplot(coeff(:, 1:3), 'Scores', score(:, 1:3),'VarLabels',features)
                  Figure 6: Biplot of the features about the first three principal components
 
The biplot shows the relation between the scores, features, and the first three principal components. It is essentially used to see what features are related to which component. Figure 5 shows the biplot executed in the above script, and the first major observation to be seen is that the Time (which is the predictor variable) scores are mainly located in the region of component 1. The cell voltages contribute towards component 1 and current, and current density both contribute towards component 2. When the figure is magnified, 8-9 features can be seen located very close to the origin. This observation can conclude that these features do not contribute toward the first three principal components at all.

1.6.5 Correlation Analysis
% Transform the data into an array

numericData = table2array(data); 

% Compute the correlation matrix
correlationMatrix = corr(numericData);

figure;
heatmap(correlationMatrix, 'Colormap', parula);
                         Figure 7 : Heatmap of the correlation between each feature

Since there are a lot of features, hard coding the correlation between each would be difficult, therefore the correlation matrix of the numeric data values is computed. The correlation matrix shows the correlation between each pair of columns within the dataset. This is then displayed using a heatmap to visually show the correlation between each feature, as depicted in Figure 3. In theory, a lower correlation can be desired because there will be more independent information available, whereas a higher correlation might give redundant information. From Figure 3 it is seen that the correlation between the feature and itself is always equal to 1. Feature 1 has a strong negative correlation to Features 2-7, showing an inversely proportional relationship. This relationship exists between Time and the Cell voltages. Conversely, Feature 23 has a strong positive correlation to Figures 2-7. This relationship exists between the Outlet flow rate of Air and the Cell voltages.

Section 2 Feature set Development and Exploration
2.1 Finding per hour quantities
% Grouping the data in hours
timestamps_hr = data.Time_h_;
voltage = data.Utot_V_; % Corresponding values
power = voltage.*data.I_A_;

% Round each fractional hour into hour
hour_bins = floor(timestamps_hr); 
% Group values by hour and calculate mean voltage
[Hours, ~, idx] = unique(hour_bins);
avg_voltage = accumarray(idx, voltage, [], @mean);

% Plotting the avg voltage against raw voltage to visualize the validity of the avg voltage array which is used for feaature extraction.
plot(timestamps_hr,voltage,"Color","#FFA500")
hold on
plot(Hours, avg_voltage,"Color","#0000FF")
legend('Original Plot', 'Plot of Average', 'Location', 'best');
xlabel("Time (hr)")
ylabel ("Stack Voltage")
hold off
                            Figure 8 : Plot of the average voltage against total stack voltage


2.2 Statistical Features
Feature 1: Voltage Degradation Rate (V/h)
% Compute degradation rate (voltage drop per hour)
% Difference between consecutive hourly average voltages
voltage_degradation = [zeros(1,1); diff(avg_voltage)];  % Replace NaN value with zero

Feature 2: Peak-to-peak value per hour
peak_to_peak_voltage = accumarray(idx, voltage, [], @(x) max(x) - min(x));
Feature 3: Standard deviation per hour
std_voltage = accumarray(idx, voltage, [], @std);

Feature 4: Variance
var_voltage = accumarray(idx, voltage, [], @var);

Feature 5: Skewness
skew_voltage = accumarray(idx, voltage, [], @(x) skewness(x));

Feature 6: Kurtosis
kurt_voltage = accumarray(idx, voltage, [], @(x) kurtosis(x));

 Feature 7: Root Mean Square (RMS)
rms_voltage = accumarray(idx, voltage, [], @(x) sqrt(mean(x.^2)));

Feature 8: Coefficient of Variation (CV)
% Defined as std / mean, handle division-by-zero carefully
cv_voltage = accumarray(idx, voltage, [], @(x) std(x) / mean(x));

2.3 Trend and degradation features
Feature 9: Exponential moving average
% More weight on recent voltages:
alpha = 0.3;  % Smoothing factor (0 < alpha < 1)
exp_moving_avg_voltage = filter(alpha, [1 alpha-1], avg_voltage);
Feature 10: Cumulative Voltage Drop
% Assumes initial voltage as baseline:
cumulative_drop = avg_voltage(1) - avg_voltage;
Feature 11: First Derivative (Instantaneous Rate of Change)
% Using diff over raw voltage (if time is uniform):
first_derivative = [0; diff(voltage)];  % Instantaneous per-sample change
first_derivative_hourly = accumarray(idx, first_derivative, [], @mean);

Feature 12: Second Derivative (Curvature / Acceleration)
% Measures change in slope (if voltage is smooth enough):
second_derivative = [0; 0; diff(voltage, 2)];  % Acceleration-like metric
second_derivative_hourly = accumarray(idx, second_derivative, [], @mean);

Combining features into a feature sets
% Combine into a results table
FeatureSet = table(avg_voltage, voltage_degradation, peak_to_peak_voltage,std_voltage,var_voltage,skew_voltage,kurt_voltage,rms_voltage,cv_voltage,...
    exp_moving_avg_voltage,cumulative_drop,first_derivative_hourly,second_derivative_hourly,'VariableNames', {'Avg Voltage', 'Degradatio Rate','Peak to Peak Voltage', ...
    'Standard Deviation Voltage','Variance voltage','Skewness Voltage','Kurtosis Voltage','RMS Voltage','Covariance Voltage','Exponentially Moving Avg','Cumulative Drop', ...
    'First Hourly Derivative','Second Hourly Derivative'});
disp(FeatureSet);

2.4 Correlation analysis
Plotting the correlation coefficients amongst different features
% Transform the data into an array
numericData = table2array(FeatureSet); % Remove time 

% Compute the correlation matrix
correlationMatrix = corr(numericData);
varNames = FeatureSet.Properties.VariableNames;
% Plot correlation matrix using heatmap 
figure('Position', [100, 100, 1000, 800]);  % Bigger window
h = heatmap(varNames,varNames, correlationMatrix);
% Add correlation values as labels
h.Colormap = parula;
h.CellLabelFormat = '%.2f';  % Ensure values are displayed inside cells
                                                                 Figure 9 : Plot of the average voltage against total stack voltage

2.5 Sectioning Feature-set into test and train
response1 = RUL;

n = size(FeatureSet, 1);
train_ratio = 0.7;
split_idx = floor(n * train_ratio);

trainft = FeatureSet(1:split_idx, :);
trainrespft = response1(1:split_idx, :);

testft = FeatureSet(split_idx+1:end, :);
testrespft = response1(split_idx+1:end, :);



2.6 PCA of Feature set
% Normalizing the data - Using mean scaling
FeatureSet = trainft;
X_feat = FeatureSet{:,:} ;
mu = mean(X_feat); % Row vector of column (feature) means
r = range(X_feat); % Row vector of column ranges
X_feat = (X_feat-mu)./r; % Scaled feature matrix

% Computing the pca of the normalized data

[coeff_ft, score_ft, latent_ft , tsquared_ft, explained_ft, mu_ft] = pca(X_feat) ;

% Pareto chart of principal components
figure;
paretochart = pareto(explained_ft,0.95);
xlabel('Principal Components');
ylabel('Cumulative Variance (%)');
yline(95, 'k--', 'LineWidth', 2);
barHandle = paretochart(1);
set(barHandle, 'FaceColor', [0.7, 0.3, 0.5]); 
                         Figure 10 : Plot of the average voltage against total stack voltage
2.6.1 Biplot of transformed data
% Biplot of the features in relation to the first three principle
% components

features_ft = string(FeatureSet.Properties.VariableNames) ;
figure;
biplot(coeff_ft(:, 1:3), 'Scores', score_ft(:, 1:3),'VarLabels',features_ft)
                    Figure 11 : Biplot of the PCA transformed data relating to the feature-set developed
